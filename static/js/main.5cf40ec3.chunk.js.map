{"version":3,"sources":["components/search.js","components/photos.js","app.js","services/search-service.js","serviceWorker.js","index.js"],"names":["Search","_ref","searchValue","searchTermChanged","search","react_default","a","createElement","className","htmlFor","id","type","placeholder","value","onChange","onKeyPress","event","key","onClick","Photos","photos","onImageClick","map","photo","href","style","backgroundImage","concat","farm","server","secret","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","bind","assertThisInitialized","e","setState","target","_this2","term","apiUrl","flickerApi","fetch","then","res","json","data","catch","err","console","log","searchTerm","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cf40ec3.chunk.js","sourcesContent":["import React from 'react';\nimport './search.scss';\n\nexport default function Search({ searchValue, searchTermChanged, search }) {\n    return (\n        <div className=\"search\">\n            <label htmlFor=\"search-input\">Search images:</label>\n            <input\n                id=\"search-input\"\n                type=\"text\"\n                placeholder=\"Enter search term (e.g. 'cats')\"\n                value={searchValue}\n                onChange={searchTermChanged}\n                onKeyPress={event => {\n                    if (event.key === 'Enter') {\n                        search()\n                    }\n                }}\n            />\n            <input onClick={search} type=\"submit\" value=\"Search\" />\n        </div>\n    )\n}\n","import React from 'react';\nimport './photos.scss';\n\nexport default function Photos({ photos, onImageClick }) {\n    return (\n        <div className=\"photos-grid\">\n            {photos.map(photo => (\n                <article key={photo.id}>\n                    <a\n                        href=\"#\"\n                        onClick={onImageClick}\n                        className=\"photos-grid__link\"\n                        id={photo.id}\n                    >\n                        <figure\n                            className=\"absolute-bg\"\n                            style={{\n                                backgroundImage: `url(http://farm${photo.farm}.staticflickr.com/` +\n                                `${photo.server}/${photo.id}_${photo.secret}.jpg)`\n                            }}\n                        />\n                    </a>\n                </article>\n            ))}\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport { searchTerm } from './services/search-service';\nimport Search from './components/search';\nimport Photos from './components/photos';\nimport './app.scss';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            searchValue: 'cat',\n            photos: []\n        };\n        this.search = this.search.bind(this);\n        this.searchTermChanged = this.searchTermChanged.bind(this);\n    }\n\n    componentDidMount() {\n        this.search();\n    }\n\n    searchTermChanged(e) {\n        this.setState({ searchValue: e.target.value });\n    }\n\n    search() {\n        this.setState({ loading: true });\n        searchTerm(this.state.searchValue)\n            .then(photos => this.setState({ photos, loading: false }))\n            .catch(err => this.setState({ photos: [], loading: false }));\n    }\n\n    onImageClick(e) {\n        console.log('onImageClick: ', e.target.id);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Search\n                    search={this.search}\n                    searchTermChanged={this.searchTermChanged}\n                    searchValue={this.state.searchValue}\n                />\n\n                <div>\n                    {this.state.loading && (\n                        <div>Loading...</div>\n                    )}\n\n                    {this.state.photos.length === 0 && !this.state.loading && (\n                        <div>Can't find photos for this search term</div>\n                    )}\n\n                    {this.state.photos.length > 0 && !this.state.loading && (\n                        <Photos\n                            photos={this.state.photos}\n                            onImageClick={this.onImageClick}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const apiKey = 'e38f1bc56d9486ca37e84667b7a98ba8';\nconst flickerApi = 'https://api.flickr.com/services/rest';\n\nexport const searchTerm = (term) => {\n\n    const apiUrl = flickerApi\n        + `?method=flickr.photos.search&sort=relevance&format=json&nojsoncallback=1&`\n        + `api_key=${apiKey}&text=${term}`;\n\n    return fetch(apiUrl)\n        .then(res => res.json())\n        .then(data => {\n            return data.photos.photo;\n        })\n        .catch((err) => {\n            console.log('error: ', err);\n            return err;\n        });\n};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}